#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('back-end:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
const socket = require('socket.io');
const fetch = require('node-fetch');

require('dotenv').config()

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 * In development, this will be a HTTPS server.
 */

if(process.env.DEVELOPMENT === 'TRUE') {
    console.log('in dev if');
    // Create HTTPS server
    const sslOptions = {
        key: fs.readFileSync('key.pem'),
        cert: fs.readFileSync('cert.pem'),
        passphrase: process.env.HTTPS_PASSPHRASE
    };
    var server = https.createServer(sslOptions, app);
} else {
    var server = http.createServer(app);
}

/**
 * Configure socket.io
 */
//Connect to our Database and handle a bad connection
// console.log('provess.env.NODE_ENV', process.env.NODE_ENV);
const mongoose = require('mongoose');
mongoose.connect(process.env.DATABASE);
mongoose.Promise = global.Promise; //tell mongoose to use ES6 promises
mongoose.connection.on('error', (err) => {
    console.error(err.message);
});

const YT_API_ROOT = `https://www.googleapis.com/youtube/v3`;
const  User  = require('.././models/User');
// YtUser.save
const testUser = new User({email: 'hurr', expiresAt: 123});
testUser.save()
    .then(saved => {
        console.log('successfully saved:', saved);
    })
    .catch(error => {
        console.log(error)
    });

function validateAccessToken(token) {
    return fetch(`https://www.googleapis.com/oauth2/v3/tokeninfo?access_token=${token}`)
        .then(data => data.json())
        .catch(error => console.log(error));
};
function parseValidationRes(validationRes) {
    // console.log('validationRes in parseValidationRes', validationRes);
    if(validationRes.error || validationRes.error_description) {
        return Promise.reject({
                error_description: 'Invalid or expired token',
                error_text: validationRes.error_description,
                error_location: 'parseValidationRes'
            });
    } else return ({
        email: validationRes.email,
        expiresAt: Date.now() + parseInt(validationRes.expires_in, 10)
    });
}
function getPlaylists(accessToken) {
    return fetch(`${YT_API_ROOT}/playlists?part=snippet&maxResults=50&mine=true&access_token=${accessToken}`)
        .then(data => data.json())
        .catch(error => console.log(error));
}
function parsePlaylistRes(playlistRes) {
    // console.log('playlistRes in parsePlaylistRes:', playlistRes);
    return playlistRes.items.map(playlist => {
        // console.log(playlist.snippet);
        return {
            title: playlist.snippet.title,
            id: playlist.id,
            thumbnail: playlist.snippet.thumbnails.medium,
            created: playlist.snippet.publishedAt
        };
    });

}
var io = socket(server);
io.on('connect', (client) => {
      console.log('connect in the wwww');
    client.on('test', (d) => {
        console.log(d);
        client.emit('testDataReceived', d);
    });
    client.on('accessToken', token => {
        // Validate token, then...
        validateAccessToken(token)
        // ...parse res into a form to use
            .then(validationRes => parseValidationRes(validationRes))
            // .then(userInfo => console.log(userInfo))
        // ...check the db for user info here and send if found
        // ...get playlist data for the user
            .then(_ => getPlaylists(token))
            .then(playlistRes => parsePlaylistRes(playlistRes))
            .then(playlistObjs => console.log(playlistObjs))
            .catch(error => console.log(error));
    })
});



// console.dir(io);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}





module.exports = {
    io,
    server
};
