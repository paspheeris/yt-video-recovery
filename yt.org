* On logging in and being redirected to the Profile page:
** Check localStorage 
** Send authtoken to the backend
*** Open a websocket connection here 
** Validate the authtoken (get the username)
** Check the db for any data for the associated username 
*** send any found data to the frontend
** Send req to YT API for the playlists for the user
*** Send any found data to the frontend
*** Save any new playlists in the db
** Send req to the YT API to get video titles/data for the first 
   50 items from each playlist
*** Check if the number of items in each playlist from the DB matched  
    the number from the Api request
**** If theyre not the same, we'll need to do ( differnce / 50 ) requests
**** If they are the same, we dont need to make any more reqs for that PL
*** Send data to the frontend for any new videos that havent been deleted
*** Save any new videos in the db (whether deleted or not)
** For any deleted videos in the db, that havent already been checked on the internet archive (IA): 
*** Send a request to the IA
*** Store the result in the DB (whether a title was recovered or not)
** Send results for the deleted videos to the front end
* Websocket note
** SocketIO is composted of two parts
   A server that integrates with (or mounts on) the Node.JS HTTP Server: socket.io
   A client library that loads on the browser side: socket.io-client
**  
